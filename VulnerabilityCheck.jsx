import { useState } from "react";
import { performSecurityCheck } from "../utils/securityChecks";
import { FaSpinner } from "react-icons/fa";

function VulnerabilityCheck() {
  const [url, setUrl] = useState("");
  const [results, setResults] = useState(null);
  const [error, setError] = useState("");
  const [isLoading, setIsLoading] = useState(false);
  const [securityScore, setSecurityScore] = useState(null);

  const checkVulnerabilities = async (e) => {
    e.preventDefault();
    setIsLoading(true);
    setError("");
    setResults(null);
    setSecurityScore(null);

    try {
      // Validate URL
      new URL(url);

      // Simulate network delay
      await new Promise((resolve) => setTimeout(resolve, 1500));

      const checkResults = performSecurityCheck(url);

      if (checkResults.success) {
        setResults(checkResults.results);
        setSecurityScore(checkResults.percentage);
      } else {
        setError(checkResults.error);
      }
    } catch (err) {
      setError("Please enter a valid URL (including http:// or https://)");
    } finally {
      setIsLoading(false);
    }
  };

  return (
    <div className="container mx-auto p-4 sm:p-6 max-w-4xl">
      <h1 className="text-2xl sm:text-3xl font-bold mb-6">Web Vulnerability Scanner</h1>

      <form onSubmit={checkVulnerabilities} className="mb-8">
        <div className="flex flex-col sm:flex-row gap-4">
          <input
            type="url"
            value={url}
            onChange={(e) => setUrl(e.target.value)}
            placeholder="Enter website URL (e.g., https://example.com)"
            className="flex-1 p-2 border rounded shadow-sm focus:ring-2 focus:ring-blue-300 focus:border-blue-500 outline-none"
            required
          />
          <button
            type="submit"
            disabled={isLoading}
            className="bg-blue-600 text-white px-6 py-2 rounded hover:bg-blue-700 disabled:bg-blue-400 disabled:cursor-not-allowed flex items-center justify-center min-w-[120px]"
          >
            {isLoading ? (
              <>
                <FaSpinner className="animate-spin mr-2" />
                Scanning...
              </>
            ) : (
              "Scan"
            )}
          </button>
        </div>
      </form>

      {error && (
        <div className="bg-red-100 border border-red-400 text-red-700 px-4 py-3 rounded mb-4">
          {error}
        </div>
      )}

      {securityScore !== null && (
        <div className="text-lg font-medium text-gray-700 mb-4">
          Security Score: <span className="text-blue-600">{securityScore}%</span>
        </div>
      )}

      {results && (
        <div className="grid gap-4 sm:grid-cols-2">
          {results.map((result, index) => (
            <div
              key={index}
              className="p-4 border rounded-lg shadow-sm bg-white hover:shadow-md transition-shadow"
            >
              <div className="flex items-center justify-between flex-wrap gap-2">
                <h3 className="font-semibold">{result.type}</h3>
                <span
                  className={`px-3 py-1 rounded-full text-sm ${
                    result.status === "Secure"
                      ? "bg-green-100 text-green-800"
                      : result.status === "Warning"
                      ? "bg-yellow-100 text-yellow-800"
                      : "bg-blue-100 text-blue-800"
                  }`}
                >
                  {result.status}
                </span>
              </div>
              <p className="mt-2 text-gray-600 text-sm">{result.details}</p>
            </div>
          ))}
        </div>
      )}
    </div>
  );
}

export default VulnerabilityCheck;
